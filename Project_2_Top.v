`timescale 1ns / 1ps
//****************************************************************//
//  This document contains information proprietary to the         //
//  CSULB student that created the file - any reuse without       //
//  adequate approval and documentation is prohibited             //
//                                                                //
//  Class: CECS 460												            //
//  Project name: LAB 2												         //
//  File name: Project_2_Top.v	                                 //
//                                                                //
//  Created by Harrison Fitch on 10/7/17.                         //
//  Copyright © 2017 Harrison Fitch. All rights reserved.         //
//                                                                //
//  Abstract: Top level connecting the transmit engine and 		   //
//  Tramelblaze. The processor is used to supply the transmit data//
//	 for the engine. The interrupt is generated by the transmit		//
//	 txrdy signal. At each interrupt data will be displayed based	//
//	 on the ISR in the ROM.														//
//																						//
//  Edit history: 								 								//
//                                                                //
//  In submitting this file for class work at CSULB               //
//  I am confirming that this is my work and the work             //
//  of no one else.                                               //
//                                                                //
//  In the event other code sources are utilized I will           //
//  document which portion of code and who is the author          //
//                                                                //
// In submitting this code I acknowledge that plagiarism          //
// in student project work is subject to dismissal from the class //
//****************************************************************//
module Project_2_Top(clk, rst, baud, eight, pen, ohel, TX, LEDs);
	input clk, rst, eight, pen, ohel;
	input	[3:0] baud;
	output TX;	
	output reg [15:0] LEDs;
	wire 			reset, pulse, rupt, ack, w_s, r_s, load, txrdy;
	wire [15:0] o_p, p_id;
	wire [63:0] reads, writes;
	
	reg [15:0] out;
		
	//								 clk, 		 	  rst, 				reset
	AISO 					aiso	(.clk(clk), .rst(rst), .reset(reset));
	
	//								 clk, 			  rst,        d  ,     q
	pulse_maker_PED	ped	(.clk(clk), .rst(reset), .d(txrdy), .q(pulse));
	
	//contains memories necessary to use the transmit engine
	tramelblaze_top tblaze(.CLK(clk), .RESET(reset), .IN_PORT(16'b0), .INTERRUPT(rupt), 
                        .OUT_PORT(o_p), .PORT_ID(p_id), .READ_STROBE(r_s), .WRITE_STROBE(w_s),
								.INTERRUPT_ACK(ack));

	RS_flop				rs		(.clk(clk), .rst(reset), .r(ack), .s(pulse), .q(rupt));
	
	address_decoder 	decoder(.w_s(w_s), .r_s(r_s), .p_id(p_id[5:0]), .reads(reads), .writes(writes));
	
	Transmit_Engine transmit(.clk(clk), .rst(reset), .load(load), .data(out[7:0]), .eight(eight), .pen(pen),
							.ohel(ohel), .baud(baud), .TXRDY(txrdy), .TX(TX));
	
	//synchronization flop
	always @(posedge clk, posedge reset)begin
		if (reset)begin
			out <= 16'b0;
			LEDs <= 16'b0;
		end
		else begin
			//LEDs output_port selection
			if(writes[4])
				LEDs <= o_p;
			out <= o_p;
		end
	end
	
	//load data from tramelblaze
	assign load = writes[0]; 
	
endmodule
